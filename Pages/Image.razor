@page "/image-processing"
@using System.IO
@using BlazorAI.Services
@inject ImageprocessingService ImageprocessingService
@inject IHttpClientFactory ClientFactory
@using System.Text.Json
@using System.Text.Json.Serialization
@using BlazorAI.Models
@inject IWebHostEnvironment env
@inject IConfiguration Configuration
@inject ILogger<ImageprocessingService> Logger

<h1>Blazor Image Processing</h1>

<div class="container">
  <div class="row">
    <div class="col">
      <img class="img-display" src="@imageUrl" />
            <div>
            @if (imageDescriptions != null)
            {
                <b>Result:</b><br>
         
                @foreach (var description in imageDescriptions)
                {   
                    <a  class="btn btn-dark result-badge">@description</a> 
                }
      
            }
        </div>
    </div>
  <div class="row" >
    <div class="col">
        <form @onsubmit="ProcessImage">
            <InputFile OnChange="OnInputFileChange"  />
            <br /><br />
            <button type="submit" class="btn btn-success">Start processing</button>
        </form>
    </div>
  </div>
  </div>
</div>




@code {
    private string imageUrl;
    private IBrowserFile file;
    private IList<string> imageDescriptions = new List<string>();

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        file = e.File;
        if (file != null){
            imageUrl = Path.Combine("media", file.Name);
        }
    }

    private async Task UploadMedia(string imageUrl)
    {
        if (file != null)
        {
            try{
                var path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "media", file.Name);
                var memoryStream = new MemoryStream();
                await file.OpenReadStream().CopyToAsync(memoryStream);
                await File.WriteAllBytesAsync(path, memoryStream.ToArray());
                imageUrl = Path.Combine("media", file.Name);
            }
            catch(Exception ex){
                Logger.LogError("File upload failed: ", ex.Message);
            }
        }
    }
    private async Task<MediaModel> ProcessImage()
    {
        await UploadMedia(imageUrl);
        imageDescriptions = await ImageprocessingService.GetImageTagsAsync(imageUrl);
        return null;
    }
}